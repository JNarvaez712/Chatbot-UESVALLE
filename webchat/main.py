# webchat/main.py
import asyncio
import logging

import uvicorn
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, JSONResponse, PlainTextResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

from chatbot.bot import responder_pregunta   # ‚¨ÖÔ∏è quitamos _get_index/_get_engine/_get_retriever
from chatbot.indexer import crear_o_cargar_indice

app = FastAPI(title="Chatbot UESVALLE")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],   # restringe al dominio en prod si quieres
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.mount("/static", StaticFiles(directory="webchat/static"), name="static")
templates = Jinja2Templates(directory="webchat/templates")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("uesvalle-bot")

@app.get("/health", response_class=PlainTextResponse)
async def health():
    return "ok"

@app.get("/widget", response_class=HTMLResponse)
async def widget(request: Request):
    return templates.TemplateResponse("widget.html", {"request": request})

@app.get("/preguntar")
async def preguntar(q: str):
    try:
        if not q or not q.strip():
            return {"respuesta": "Por favor, escribe tu pregunta."}
        respuesta = responder_pregunta(q)
        if not respuesta or len(respuesta.strip()) < 12:
            respuesta = ("No tengo evidencia suficiente para responder con certeza. "
                         "Intenta con m√°s contexto o revisa Atenci√≥n al Ciudadano.")
        logger.info("Q: %s | ok", q[:160])
        return {"respuesta": respuesta}
    except Exception:
        logger.exception("Error en /preguntar")
        return JSONResponse(
            content={"respuesta": "Ocurri√≥ un error procesando tu solicitud. Intenta m√°s tarde."},
            status_code=500,
        )

@app.on_event("startup")
async def startup():
    # Warm-up: asegura que exista √≠ndice (har√° el mapeo y cat√°logo antes de indexar)
    logger.info("Inicializando √≠ndice (mapeo autom√°tico de rutas + cat√°logo)‚Ä¶")
    crear_o_cargar_indice()
    logger.info("√çndice listo.")

    # Reindexaci√≥n autom√°tica cada 24h
    async def tarea_reindexacion():
        while True:
            try:
                logger.info("üîÅ Reindexaci√≥n autom√°tica iniciada (map + index)‚Ä¶")
                crear_o_cargar_indice()
                logger.info("‚úÖ Reindexaci√≥n completada.")
            except Exception:
                logger.exception("‚ö†Ô∏è Error durante la reindexaci√≥n autom√°tica")
            await asyncio.sleep(60 * 60 * 24)

    asyncio.create_task(tarea_reindexacion())

if __name__ == "__main__":
    uvicorn.run("webchat.main:app", host="127.0.0.1", port=8000, reload=True)
